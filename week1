  /**
  * 删除数组中的重复项
  */
  public int removeDuplicates(int[] nums) {
        int i=0;        
        for(int j=i+1;j<nums.length;j++){
            if(nums[i]!=nums[j]){
                i++;
                nums[i]=nums[j];
            }
        }
        
        return i+1;
  }
  //旋转数据
  public void rotate(int[] nums, int k) {

        reverse(nums,0,nums.length-1);
        int mid=k % nums.length;
        reverse(nums,0,mid-1);
        reverse(nums,mid,nums.length-1);
    }

    void reverse(int[] nums,int start,int end){
        int value=0;
        while(start < end){
            value=nums[start];
            nums[start]=nums[end];
            nums[end]=value;
            start++;
            end--;
        }
    }
    //合并有序链表
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        if(l1.val<l2.val){
            l1.next=mergeTwoLists(l1.next, l2);
            return l1;
        }else{
            l2.next=mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
    //两数之和
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }
    //前k个高频元素
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0) + 1);
        }
         PriorityQueue<Integer> queue = new PriorityQueue<Integer>( (o1, o2) -> map.get(o1) - map.get(o2));
        for(int i: map.keySet()){
            queue.add(i);
            if(queue.size()>k)
                queue.poll();
        }
        List<Integer> topList = new LinkedList<>();
        while(!queue.isEmpty()){
            topList.add(queue.poll());
        }
        Collections.reverse(topList);
        return topList;
    }
